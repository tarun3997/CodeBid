generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(uuid())
  email                 String         @unique
  mobile_number         String         @unique
  username              String         @unique
  password              String
  role                  Role           @default(USER)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime?      @updatedAt
  Profile               Profile?
  Project               Project[]
  Like                  Likes[]
  Comment               Comment[]
  Ratting               Ratting[]
  following             Follow[]       @relation("UserFollowing")
  followers             Follow[]       @relation("UserFollowers")
  Views                 Views[]
  sentMessages          Message[]      @relation("SentMessages")
  receivedMessages      Message[]      @relation("ReceivedMessages")
  conversations         Conversation[] @relation("Participant")
  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")
}

enum Role {
  ADMIN
  USER
}

model Profile {
  profile_id String  @id
  name       String
  gender     String?
  bio        String?
  profileUrl String
  location   String
  user       User    @relation(fields: [profile_id], references: [id], onDelete: Cascade)
}

enum isPaid {
  Paid
  Free
}

model Project {
  project_id    String         @id @default(uuid())
  title         String
  description   String
  project_Price Float?
  isPaid        isPaid         @default(Free)
  creator       User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     String
  likes         Likes[]
  comments      Comment[]
  ratings       Ratting[]
  views         Views[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  PostImage     PostImage[]
  Notification  Notification[]
}

model PostImage {
  imageId   Int     @id @default(autoincrement())
  imageUrl  String
  project   Project @relation(fields: [projectId], references: [project_id], onDelete: Cascade)
  projectId String
}

model Notification {
  id         String           @id @default(uuid())
  sender     User             @relation("SentNotifications", fields: [senderId], references: [id])
  senderId   String
  receiver   User             @relation("ReceivedNotifications", fields: [receiverId], references: [id])
  receiverId String
  type       NotificationType
  content    String
  post       Project?          @relation(fields: [postId], references: [project_id])
  postId     String?
  timestamp  DateTime         @default(now())
}

enum NotificationType {
  Like
  Follow
  Comment
  Admin
  Other
}

model Views {
  id        Int     @id @default(autoincrement())
  userId    String
  projectId String
  project   Project @relation(fields: [projectId], references: [project_id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Likes {
  id        Int     @id @default(autoincrement())
  userId    String
  projectId String
  project   Project @relation(fields: [projectId], references: [project_id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Comment {
  id        Int     @id @default(autoincrement())
  userId    String
  projectId String
  content   String
  project   Project @relation(fields: [projectId], references: [project_id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ratting {
  id        Int     @id @default(autoincrement())
  userId    String
  projectId String
  rating    Float
  project   Project @relation(fields: [projectId], references: [project_id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Follow {
  id          Int    @id @default(autoincrement())
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
}

model Message {
  id           String         @id @default(uuid())
  text         String
  sender       User           @relation("SentMessages", fields: [senderId], references: [id])
  senderId     String
  receiver     User           @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId   String
  createdAt    DateTime       @default(now())
  Conversation Conversation[]

  @@index([senderId, receiverId])
}

model Conversation {
  id           String    @id @default(uuid())
  participants User[]    @relation("Participant")
  messages     Message[]
}
